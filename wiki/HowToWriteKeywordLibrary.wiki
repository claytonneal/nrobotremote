#summary How to write a keyword library

= How To Write a Keyword Library =

<wiki:toc max_depth="3" />

Writing a keyword library is very simple.Create a new class library project in C#/Vb.net and add a _public_ class to the project. All public _instance_ methods of the class with:

  * Return type = void, String, Boolean, Int32, Int64, Double, String[[]]
  * No parameters
  * All parameters of type String

Will be considered as keywords.
*Note* _Static_ methods are not considered as keywords.

The return type of String[[]] corresponds to robot framework list variables, the other return types are robot framework scalar variables.

== Example ==

The following class exposes three keyword methods

<code language="c#">
public class MyKeywordClass
{
   
   public void DoAction()
   {
      ...
   }

   public String DoOperation(String arg1, String arg2)
   {
      ...
   }

   public void Do_Task(string arg1)
   {
      ...
   }

}
</code>

The following keywords can be used by robot framework

  * DOACTION
  * DOOPERATION
  * DO TASK
  
== General Notes ==

  * It is not possible to overload the same keyword method. For a method to be considered a keyword it must have only one implementation.

== Keyword Names ==

When a keyword such as "DO TASK" is used in a robot framework script, NRobotRemote will try to find a corresponding method with name "do_task". i.e. Spaces are replaced with underscores.

== Documentation ==

If you compile your keyword class to produce xml documentation, the xml documentation file can be passed to NRobotRemote. When the keyword is executed the _summary_ xml element of the documentation for the executed method is passed back to robot framework and appears in the results file.

It is also possible to use the _libdoc_ tool from Robot Framework to document all the keywords hosted in NRobotRemote. See Robot Framework documentation on libdoc command line parameters.
 
== FAQ ==

*Is it possible for the keyword class to maintain state?*<br/>
Yes, only one instance of the keyword class is created for the duration of the service.

*How can my keyword give log information back to robot framework to include in the results file?*<br/>
All _Trace_ information is collected by NRobotRemote when the keyword method is executed. This is passed back to robot framework to include in the results report. Example:

<code language="c#">
public class MyKeywordClass
{
   public String delete_file(String arg1)
   {
      File.Delete(arg1);
      Trace.WriteLine(String.Format("{0} was deleted",arg1));
   }
}

</code>

*How is a keyword considered as a FAIL*?<br/>
A keyword method is considered as FAIL (and will be shown in the robot framework report as FAIL), if the method raises an _exception_. Otherwise the keyword will be considered as PASS.

*Can a keyword method return null?*<br/>
Yes, if a methods return parameter type is _string_ the method can return null. Nullable int, bool, double arent supported

*Should I compile as x86, x64, or AnyCPU?*<br/>
Compile to the same as the instance of NRobotRemote that will be used. If your keyword library is x64, you will need x64 NRobotRemote